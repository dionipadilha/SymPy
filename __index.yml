# sympy.yaml
---
Rationals:
  - rational object     # Rational(a, b)
  - rational object     # frac = S(a)/b + S(c)/d
  - combines terms      # together(frac)
  - expand terms        # expand(frac)
  - pull the term out   # apart(frac)
  - cancel the terms    # cancel(frac)
  - decimal notation    # N(frac, precission)
  - decimal notation    # (frac).evalf(precission)
  - decimal to fraction # nsimplify(0.25)
  - cientific notation  # 1.23e-3

---
SymbolicWorkflow:
  - Create a symbolic environment  # from sympy import *, init_session()
  - Defining a symbolic variables  # x, a, b, c = symbols('x, a, b, c')
  - Defining a symbolic expression # expr = a*x**2 + b*x + c
  - Defining a symbolic function   # f = Lambda(x, expr)
  - evaluate the symbolic function # f(0)
  - Defining an symbolic equation  # quadratic_eq = Eq(f(x), 0)
  - Solving an symbolic equation   # roots_ = solve(quadratic_equation, x)
  - Find specific solutions        # coeffs = {a:1, b:-5, c:6}; roots_.subs(coeffs)
  - Plotting a symbolic function   # plot(f(x).subs(coeffs), (x, 0, 5))
  
---
Assumptions:
  - set assumptions           # n = symbols('n', integer=True)
  - assumptions returns       # None, True, False
  - assumption simplification # sqrt(x**2) --> sqrt(x**2), x, |x|
  - multiple assumptions      # x = symbols('x', real=True, negative=False)
  - predicates                # x.assumptions0

---
Geometry:
  - primitive object         # point = Point(0, 1)
  - one-dimensional objects  # line = Line(p1, p2)
  - angle between two lines  # line1.angle_between(line2)
  - regions:
    - triangle               # Triangle(p1, p2, p3)
    - circle                 # Circle(center, radius)
    - ellipse                # Ellipse(center, hradius, vradius, eccentricity)
    - square                 # RegularPolygon(p, 1, 4)
  - area calculation         # region.area

---
Complex:
  - imaginary unity    # I**2 = -1
  - complex number     # z = a + b*I
  - real part          # re(z)
  - imaginary part     # im(z)
  - absolute value     # Abs(z)
  - argument (radians) # arg(z)
  - complex conjugate  # conjugate(z)
  
PowerComplex:
  - power complex                        # exp(z)
  - expand complex trigonometric form    # expanded_z = expand_complex(exp_z)
  - simplify the expanded complex number # simplify(expanded_z)
  - alternate forms                      # expanded_z.rewrite(exp)
  - alternate forms                      # expanded_z.rewrite(exp).factor()

---
Calculus:
  Limits:
    - limit of a function    # limit(f(x), x, a)
    - limit at a singularity # limit(sin(x)/x, x, 0)
    - limit at infinity      # limit(f(x), x, oo)
    - limit at one side only # limit(f(x), x, 0, '-')
  Derivatives:
    - derivative of a function # diff(f(x), x)
    - nth-order derivative     # diff(f(x), x, n)
    - partial derivative       # diff(f(x, y), x)
    - mixed partial derivative # diff(f(x, y), x, y)
  Integrals:
    - integral of a function # integrate(f(x), x)
    - definite integral      # integrate(f(x), (x, a, b))
    - double integral        # Integral(f(x), x, x)
    - multiple integrals     # integrate(f(x, y), (x, a, b), (y, c, d))
